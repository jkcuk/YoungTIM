package library.maths;public class MyMath{	public static double sqr(double x)	{		return x*x;	}		public static double log10(double x)	{		return Math.log(x) / Math.log(10);	}		public static int getBase10Exponent(double x)	{		return (int)(Math.log(x) / Math.log(10));	}		public static double getBase10Mantissa(double x)	{		return x / Math.pow(10, getBase10Exponent(x));	}	// C / C++ - type epsilon.  Description of C++ method numeric_limits::epsilon:	// It returns the difference between 1 and the least value greater than 1 that	// is representable. The value can be either FLT_EPSILON, DBL_EPSILON or	// LDBL_EPSILON. The value returned is meaningful only for floating point types.	public static double dbl_epsilon()	{		return Double.longBitsToDouble(Double.doubleToLongBits(1.0)+1L)-1.0;	}		/**	 * This method converts from degrees to radians.	 * 	 * @param deg An angle in degrees to be converted.	 * @return The corresponding angle in radians.	 */	public static double deg2rad(double deg)	{		return deg/180.*Math.PI;	}		public static double rad2deg(double rad)	{		return rad*180/Math.PI;	}}